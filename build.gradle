plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "com.diffplug.eclipse.apt" version "3.29.1"
	id 'com.google.cloud.tools.jib' version '3.0.0'
	id "com.avast.gradle.docker-compose" version "0.14.3"
}

group = 'com.mediscreen'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

repositories {
	mavenCentral()
	mavenLocal()
}

ext {
	set('springCloudVersion', "2020.0.2")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
 	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
	
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback'
    }
}

tasks {
    build {
        dependsOn(tasks.jib)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
        '-Amapstruct.defaultComponentModel=spring'
    ]
}

jib {
	from {
		image = 'openjdk:14-alpine'	
	}
	to {
		image = 'golowik/diabgnozscreen-patient-service-image'
		auth {
			username = 'golowik'
			password = 'Morgane190813*'
		}
	}
	container {
		ports = ['8081']
	}
}

dockerCompose {
	useComposeFiles = ['docker-compose.yml']
}


jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("build/jacoco")
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}





